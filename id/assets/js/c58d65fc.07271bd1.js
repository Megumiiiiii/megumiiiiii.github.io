"use strict";(self.webpackChunkelysian=self.webpackChunkelysian||[]).push([[827],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},425:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:t},n)}},3992:(e,n,t)=>{t.d(n,{Z:()=>v});var a=t(7462),r=t(7294),o=t(6010),i=t(2957),l=t(6550),s=t(5238),u=t(3609),c=t(2560);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=m(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,u]=h({queryString:t,groupId:a}),[p,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),f=(()=>{const e=s??p;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var f=t(1048);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==l&&(p(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},i,{className:(0,o.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function N(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function k(e){const n=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(N,(0,a.Z)({},e,n)))}function v(e){const n=(0,f.Z)();return r.createElement(k,(0,a.Z)({key:String(n)},e))}},2240:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=t(7462),r=(t(7294),t(4137)),o=t(3992),i=t(425);const l={title:"Migration",sidebar_position:2,authors:["megumii"],tags:["Arweave","EVM"]},s=void 0,u={unversionedId:"what/sarco/update",id:"what/sarco/update",title:"Migration",description:"Hapus images sebelumnya",source:"@site/i18n/id/docusaurus-plugin-content-docs/current/what/sarco/update.mdx",sourceDirName:"what/sarco",slug:"/what/sarco/update",permalink:"/id/docs/what/sarco/update",draft:!1,editUrl:"https://github.com/Megumiiiiii/megumiiiiii.github.io/edit/main/docs/what/sarco/update.mdx",tags:[{label:"Arweave",permalink:"/id/docs/tags/arweave"},{label:"EVM",permalink:"/id/docs/tags/evm"}],version:"current",lastUpdatedBy:"Megumiiiiii",lastUpdatedAt:1697842191,formattedLastUpdatedAt:"20 Okt 2023",sidebarPosition:2,frontMatter:{title:"Migration",sidebar_position:2,authors:["megumii"],tags:["Arweave","EVM"]},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/id/docs/what/sarco/"},next:{title:"AR",permalink:"/id/docs/what/ar"}},c={},p=[{value:"Hapus images sebelumnya",id:"hapus-images-sebelumnya",level:3},{value:"Pull Repo",id:"pull-repo",level:3},{value:"Set .env",id:"set-env",level:3},{value:"Register",id:"register",level:3},{value:"RUN!",id:"run",level:2},{value:"Lalu update profile Ethereum",id:"lalu-update-profile-ethereum",level:4}],m={toc:p},d="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"hapus-images-sebelumnya"},"Hapus images sebelumnya"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd quickstart-archaeologist\nCOMPOSE_PROFILES=service docker compose down --remove-orphans\ndocker rmi jwilder/nginx-proxy nginxproxy/acme-companion ghcr.io/sarcophagus-org/sarcophagus-v2-archaeologist-service\n")),(0,r.kt)("h3",{id:"pull-repo"},"Pull Repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git pull\nCOMPOSE_PROFILES=service docker compose pull\n")),(0,r.kt)("h3",{id:"set-env"},"Set .env"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove old ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rm .env\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Copy sample")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp .env.example .env\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"isi ",(0,r.kt)("inlineCode",{parentName:"li"},".env"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano .env\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Gunakan wss:// bukan https://"),(0,r.kt)("li",{parentName:"ol"},"Generate Mnemonic baru untuk setiap chain, generate ",(0,r.kt)("a",{parentName:"li",href:"https://iancoleman.io/bip39/"},"Here")," or anything you want"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contoh")),(0,r.kt)("admonition",{title:".env",type:"info"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"ETH_PRIVATE_KEY")," is your Private Key which has ETH/Matic and $SARCO"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"NOTIFICATION_WEBHOOK_URL")," is your discord webhook url. You can follow the instructions here to set up a discord webhook url: ",(0,r.kt)("a",{parentName:"li",href:"https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks"},"https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks"))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Both Chain",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title=".env"',title:'".env"'},'## Key used to encrypt secrets and sign ETH transactions\n## The address associated with this key is your archaeologist identifier\nETH_PRIVATE_KEY=ugfhttawfihqwoid132b1231b23\n\n## (optional) multiply gas price estimation by this amount (i.e. 2 means 2x RPC gas price estimate)\n#GAS_MULTIPLIER=\n\n## Domain to use for your archaeologist\n## This domain should be pointed with an A record to your server\'s IP\nDOMAIN=my.exampledomain.com\n\n## Comma-separated list of chain ids of each network you want to run your service on.\n## Supported Chain IDS:\n## 1 = Mainnet\n## 5 = Goerli\n## 11155111 = Sepolia\n## 84531 = Base Goerli\n## 80001 = Polygon Mumbai\n## example, to run on mainnet, goerli, and sepolia, set:\n## CHAIN_IDS="1,5,11155111"\nCHAIN_IDS=1,137\n\n## Here, you should define:\n## - RPC provider urls.\n## - Mnemonics used to derive keypairs to encrypt sarcophagi.\n##   Generate a new one here - https://iancoleman.io/bip39/ or see README to generate one offline.\n## Uncomment and set, for each network chain id you want to run on, your own\n## private provider URL (infura, alchemy, etc) and a unique mnemonic for that network.\n## ================================================================================================\nMAINNET_PROVIDER_URL=wss://eth-mainnet\nMAINNET_ENCRYPTION_MNEMONIC=never gonna give you up never gonna let you down\n\n# GOERLI_PROVIDER_URL=\n# GOERLI_ENCRYPTION_MNEMONIC=\n\nPOLYGON_MAINNET_PROVIDER_URL=wss://polygon-mainnet\nPOLYGON_MAINNET_ENCRYPTION_MNEMONIC=never gonna tell a lie and hurt you\n'))),(0,r.kt)(i.Z,{value:"Ethereum Only",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title=".env"',title:'".env"'},'## Key used to encrypt secrets and sign ETH transactions\n## The address associated with this key is your archaeologist identifier\nETH_PRIVATE_KEY=ugfhttawfihqwoid132b1231b23\n\n## (optional) multiply gas price estimation by this amount (i.e. 2 means 2x RPC gas price estimate)\n#GAS_MULTIPLIER=\nNOTIFICATION_WEBHOOK_URL=https://discord.com/api/webhooks/hafkakakjajbasbkadsbaksdjbakfbakfaf\n\n## Domain to use for your archaeologist\n## This domain should be pointed with an A record to your server\'s IP\nDOMAIN=my.exampledomain.com\n\n## Comma-separated list of chain ids of each network you want to run your service on.\n## Supported Chain IDS:\n## 1 = Mainnet\n## 5 = Goerli\n## 11155111 = Sepolia\n## 84531 = Base Goerli\n## 80001 = Polygon Mumbai\n## example, to run on mainnet, goerli, and sepolia, set:\n## CHAIN_IDS="1,5,11155111"\nCHAIN_IDS=1\n\n## Here, you should define:\n## - RPC provider urls.\n## - Mnemonics used to derive keypairs to encrypt sarcophagi.\n##   Generate a new one here - https://iancoleman.io/bip39/ or see README to generate one offline.\n## Uncomment and set, for each network chain id you want to run on, your own\n## private provider URL (infura, alchemy, etc) and a unique mnemonic for that network.\n## ================================================================================================\nMAINNET_PROVIDER_URL=wss://eth-mainnet\nMAINNET_ENCRYPTION_MNEMONIC=never gonna give you up never gonna let you down\n\n# GOERLI_PROVIDER_URL=\n# GOERLI_ENCRYPTION_MNEMONIC=\n\n##POLYGON_MAINNET_PROVIDER_URL=\n##POLYGON_MAINNET_ENCRYPTION_MNEMONIC=\n'))),(0,r.kt)(i.Z,{value:"Polygon Only",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title=".env"',title:'".env"'},'## Key used to encrypt secrets and sign ETH transactions\n## The address associated with this key is your archaeologist identifier\nETH_PRIVATE_KEY=ugfhttawfihqwoid132b1231b23\n\n## (optional) multiply gas price estimation by this amount (i.e. 2 means 2x RPC gas price estimate)\n#GAS_MULTIPLIER=\nNOTIFICATION_WEBHOOK_URL=https://discord.com/api/webhooks/hafkakakjajbasbkadsbaksdjbakfbakfaf\n\n## Domain to use for your archaeologist\n## This domain should be pointed with an A record to your server\'s IP\nDOMAIN=my.exampledomain.com\n\n## Comma-separated list of chain ids of each network you want to run your service on.\n## Supported Chain IDS:\n## 1 = Mainnet\n## 5 = Goerli\n## 11155111 = Sepolia\n## 84531 = Base Goerli\n## 80001 = Polygon Mumbai\n## example, to run on mainnet, goerli, and sepolia, set:\n## CHAIN_IDS="1,5,11155111"\nCHAIN_IDS=137\n\n## Here, you should define:\n## - RPC provider urls.\n## - Mnemonics used to derive keypairs to encrypt sarcophagi.\n##   Generate a new one here - https://iancoleman.io/bip39/ or see README to generate one offline.\n## Uncomment and set, for each network chain id you want to run on, your own\n## private provider URL (infura, alchemy, etc) and a unique mnemonic for that network.\n## ================================================================================================\n##MAINNET_PROVIDER_URL=\n##MAINNET_ENCRYPTION_MNEMONIC=\n\n# GOERLI_PROVIDER_URL=\n# GOERLI_ENCRYPTION_MNEMONIC=\n\nPOLYGON_MAINNET_PROVIDER_URL=wss://polygon-mainnet\nPOLYGON_MAINNET_ENCRYPTION_MNEMONIC=never gonna tell a lie and hurt you\n'))))),(0,r.kt)("h3",{id:"register"},"Register"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to run on multiple chain, you need to registering 1 by 1."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Ethereum",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"COMPOSE_PROFILES=register NETWORK=mainnet docker compose run register\n"))),(0,r.kt)(i.Z,{value:"Polygon",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"COMPOSE_PROFILES=register NETWORK=polygonMainnet docker compose run register\n"))))),(0,r.kt)("h2",{id:"run"},"RUN!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"COMPOSE_PROFILES=service NETWORK=all docker compose up -d\n")),(0,r.kt)("h4",{id:"lalu-update-profile-ethereum"},"Lalu update profile Ethereum"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"COMPOSE_PROFILES=service NETWORK=mainnet docker compose exec -it archaeologist sh\ncli update -u --network mainnet\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"exit\n")))}h.isMDXComponent=!0}}]);