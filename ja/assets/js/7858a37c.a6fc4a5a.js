"use strict";(self.webpackChunkelysian=self.webpackChunkelysian||[]).push([[5885],{4137:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1304:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(4137));const o={title:"Frame",sidebar_position:7,tags:["EVM","Non-Incentive"]},i=void 0,l={unversionedId:"what/frame",id:"what/frame",title:"Frame",description:"Official Links",source:"@site/docs/what/frame.mdx",sourceDirName:"what",slug:"/what/frame",permalink:"/ja/docs/what/frame",draft:!1,editUrl:"https://github.com/Megumiiiiii/megumiiiiii.github.io/edit/main/docs/what/frame.mdx",tags:[{label:"EVM",permalink:"/ja/docs/tags/evm"},{label:"Non-Incentive",permalink:"/ja/docs/tags/non-incentive"}],version:"current",lastUpdatedBy:"Megumiiiiii",lastUpdatedAt:1698843906,formattedLastUpdatedAt:"2023\u5e7411\u67081\u65e5",sidebarPosition:7,frontMatter:{title:"Frame",sidebar_position:7,tags:["EVM","Non-Incentive"]},sidebar:"tutorialSidebar",previous:{title:"Card Chain",permalink:"/ja/docs/what/card"},next:{title:"Subsquid",permalink:"/ja/docs/category/subsquid"}},s={},c=[{value:"Official Links",id:"official-links",level:2},{value:"Minimum Specifications",id:"minimum-specifications",level:2},{value:"Install Docker and More",id:"install-docker-and-more",level:2},{value:"Create directory",id:"create-directory",level:2},{value:"Clone repository",id:"clone-repository",level:2},{value:"Edit <code>testnet.json</code>",id:"edit-testnetjson",level:2},{value:"Run",id:"run",level:2},{value:"Check logs",id:"check-logs",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"official-links"},"Official Links"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.docs.frame.xyz/validator"},"Docs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://x.com/frame_xyz"},"Twitter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://discord.gg/framexyz"},"Discord"))),(0,r.kt)("h2",{id:"minimum-specifications"},"Minimum Specifications"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Spec"),(0,r.kt)("th",{parentName:"tr",align:null},"Size"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CPU"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RAM"),(0,r.kt)("td",{parentName:"tr",align:null},"8 GB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SSD"),(0,r.kt)("td",{parentName:"tr",align:null},"50 GB")))),(0,r.kt)("h2",{id:"install-docker-and-more"},"Install Docker and More"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update; sudo apt upgrade -y\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt-get update && sudo apt install git build-essential -y && sudo apt install apt-transport-https ca-certificates curl software-properties-common -y && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable" && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y\n')),(0,r.kt)("h2",{id:"create-directory"},"Create directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir frame\ncd frame\nmkdir data\n")),(0,r.kt)("h2",{id:"clone-repository"},"Clone repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/frame-network/node-config.git\n")),(0,r.kt)("h2",{id:"edit-testnetjson"},"Edit ",(0,r.kt)("inlineCode",{parentName:"h2"},"testnet.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano node-config/testnet.json\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"find ",(0,r.kt)("inlineCode",{parentName:"li"},"<SEPOLIA_RPC_HERE>")," and replace with your Sepolia RPC, you can find ",(0,r.kt)("a",{parentName:"li",href:"https://chainlist.org/chain/11155111"},"HERE")),(0,r.kt)("li",{parentName:"ul"},"example: ",(0,r.kt)("inlineCode",{parentName:"li"},'"url": "https://rpc-sepolia"')),(0,r.kt)("li",{parentName:"ul"},"Save")),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d \\\n--name frame \\\n--rm \\\n-it \\\n-v $(pwd)/node-data:/home/user/.frame \\\n-v $(pwd)/node-config/testnet.json:/home/user/testnet.json public.ecr.aws/o8e2k8j7/nitro-node:frame \\\n--conf.file testnet.json\n")),(0,r.kt)("h3",{id:"check-logs"},"Check logs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs -f frame\n")),(0,r.kt)("h3",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you facing an error like this")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'INFO [10-30|21:29:15.318] rpc response                             method=eth_getLogs logId=2 err="400 Bad Request: {\\"jsonrpc\\":\\"2.0\\",\\"id\\":2,\\"error\\":{\\"code\\":-32601,\\"message\\":\\"Method not found\\",\\"data\\":{\\"method\\":\\"\'eth_getLogs\' is unavailable on our public API! Head over to https://bit.ly/gettinganodewithblast for more information.\\"}}}" result=null attempt=0 args="[{\\"address\\":[\\"0x62ca56aa7a475d4a9170855fd184ee60454f96a8\\"],\\"fromBlock\\":\\"0x4504c7\\",\\"toBlock\\":\\"0x4504c7\\",\\"topics\\":[[\\"0x5e3c1311ea442664e8b1611bfabef659120ea7a0a2cfc0667700bebc69cbffe1\\"]]}]"\nUsage of /usr/local/bin/nitro:\nERROR[10-30|21:29:15.318] error initializing database              err="failed getting delayed messages while attempting to get serialized chain config from init message: 400 Bad Request: {\\"jsonrpc\\":\\"2.0\\",\\"id\\":2,\\"error\\":{\\"code\\":-32601,\\"message\\":\\"Method not found\\",\\"data\\":{\\"method\\":\\"\'eth_getLogs\' is unavailable on our public API! Head over to https://bit.ly/gettinganodewithblast for more information.\\"}}}"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Solutions",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Change the RPC URL."),(0,r.kt)("li",{parentName:"ul"},"If still doesn't work, open the Port")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo ufw allow 8547; sudo ufw allow 8548\n")))}u.isMDXComponent=!0}}]);